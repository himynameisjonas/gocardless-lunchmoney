#!/usr/bin/env ruby

require "optparse"
require_relative "../config"

options = {}
opts = OptionParser.new do |opts|
  opts.banner = "Usage: setup [options]"

  opts.on("--list-banks [COUNTRY]", "List available banks for country code (defaults to SE)") do |country|
    options[:list] = country || "SE"
  end

  opts.on("--create-requisition INSTITUTION_ID", "Create a new requisition for institution") do |id|
    options[:create] = id
  end

  opts.on("--recreate-requisition [INSTITUTION_ID]", "Recreate expired requisition") do |id|
    options[:recreate] = id || true
  end

  opts.on("--sync-accounts", "Sync accounts from GoCardless") do |id|
    options[:sync_accounts] = true
  end

  opts.on("--list-accounts", "List accounts and mapping to Lunch Money") do |id|
    options[:list_accounts] = true
  end

  opts.on("--map_account [ACCOUNT_ID]", "Map GoCardless Account id") do |account_id|
    options[:map_account] = account_id
  end

  opts.on("--map_asset [ASSET_ID]", "Map Lunch Money asset id") do |asset_id|
    options[:map_asset] = asset_id
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end

opts.parse!

setup = BankSetup.new
if options[:sync_accounts]
  puts "Syncing accounts from GoCardless"
  setup.sync_accounts
elsif options[:list_accounts]
  accounts = Account.all
  if accounts.empty?
    puts "No accounts found"
    exit 1
  end

  puts "-" * 50
  accounts.each do |acc|
    puts "\e[1m#{acc[:name]}\e[0m"  # Bold name
    puts "ID: #{acc[:account_id]}"
    puts "Name: #{acc[:name]}"
    puts "Insitution: #{acc.requisition.institution_id}"
    puts "Lunch Money ID: #{acc[:lunch_money_id]}"
    puts "Status: #{acc[:status]}"
    puts "Last Synced: #{acc[:last_synced_at]}"
    puts "-" * 50
  end
elsif options[:map_account] || options[:map_asset]
  account_id = options[:map_account]
  asset_id = options[:map_asset]
  if account_id.nil? || asset_id.nil?
    puts "Please specify both --map_account and --map_asset"
    exit 1
  end

  puts "Mapping account: #{account_id} to asset: #{asset_id}"
  account = Account.where(account_id: account_id).first
  if account.nil?
    puts "Account not found"
    exit 1
  end
  account.update(lunch_money_id: asset_id)
elsif options[:list]
  country = options[:list].upcase
  puts "Fetching banks for country: #{country}"
  puts "-" * 50

  institutions = setup.list_institutions(country)
  if institutions.empty?
    puts "No banks found for country code: #{country}"
    exit 1
  end

  institutions.sort_by { |inst| inst[:name] }.each do |inst|
    puts "\e[1m#{inst[:name]}\e[0m"  # Bold name
    puts "ID: #{inst[:id]}"
    puts "Countries: #{inst[:countries]}"
    puts "-" * 50
  end

  puts "\nTo connect to a bank, run:"
  puts "#{$PROGRAM_NAME} --create-requisition BANK_ID"
elsif options[:create]
  puts "Creating requisition for institution: #{options[:create]}"
  begin
    link = setup.create_requisition(options[:create])
    puts "\n\e[32mSuccess!\e[0m Please visit this URL to authorize access to your bank:"
    puts "\e[1m#{link}\e[0m"
    puts "\nAfter authorization, the requisition will be automatically tracked and synced."
  rescue => e
    puts "\e[31mError:\e[0m #{e.message}"
    exit 1
  end
elsif options[:recreate]
  puts "Recreating requisition"
  begin
    link = setup.recreate_requisition(options[:recreate])
    puts "\n\e[32mSuccess!\e[0m Please visit this URL to authorize access to your bank:"
    puts "\e[1m#{link}\e[0m"
    puts "\nAfter authorization, the requisition will be automatically tracked and synced."
  rescue => e
    puts "\e[31mError:\e[0m #{e.message}"
    exit 1
  end
else
  puts opts
  exit 1
end
